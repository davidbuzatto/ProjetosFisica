/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PainelPrincipal.java
 *
 * Created on May 10, 2011, 5:01:05 PM
 */
package projetofisicamovimento.ig;

import java.awt.Color;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import projetofisicamovimento.modelo.Carrinho;
import projetofisicamovimento.modelo.Linha;
import projetofisicamovimento.modelo.MassaAceleradora;
import projetofisicamovimento.modelo.Roldana;
import projetofisicamovimento.modelo.Sensor;
import projetofisicamovimento.modelo.Trilho;

/**
 * Janela principal do sistema.
 *
 * @author David Buzatto
 */
public class JanelaPrincipal extends javax.swing.JFrame {
    
    private PainelDesenho painelDesenho;
    private PainelGrafico painelGrafico;
    private Trilho trilho;
    private Sensor sensor1;
    private Sensor sensor2;
    private Carrinho carrinho;
    private Roldana roldana;
    private MassaAceleradora massaAceleradora;
    private Linha linha;
    
    private double xIniCarrinho;
    private double yIniMassaAceleradora;
    
    private double posicaoSensor1;
    private double posicaoSensor2;
    private double tempoSensor1;
    private double tempoSensor2;
    
    private double massaMassaAceleradora;
    private double massaCarrinho;
    private double aceleracao;
    private double gravidade;
    
    private int quadrosPorSegundo;
    private boolean executar;
    private boolean slidersAtivados = false;
    private DecimalFormat df = new DecimalFormat( "0.00" );

    /** Creates new form PainelPrincipal */
    public JanelaPrincipal() {
        initComponents();
        preparar();
    }
    
    private void preparar() {
        
        painelDesenho = ( PainelDesenho ) painelMovimento;
        painelGrafico = ( PainelGrafico ) painelPlotagem;
        
        xIniCarrinho = 20;
        yIniMassaAceleradora = 220;
        
        gravidade = 0.1;
        
        trilho = new Trilho();
        trilho.setX( 20 );
        trilho.setY( 200 );
        
        sensor1 = new Sensor();
        sensor1.setX( 150 );
        sensor1.setY( 130 );
        sensor1.setCorAtivado( new Color( 0, 102, 153, 100 ) );
        
        sensor2 = new Sensor();
        sensor2.setX( 330 );
        sensor2.setY( 130 );
        sensor2.setCorAtivado( new Color( 0, 102, 153, 100 ) );
        
        carrinho = new Carrinho();
        //carrinho.setX( ... );  configurado no método resetar
        carrinho.setY( 186 );
        
        roldana = new Roldana();
        roldana.setX( 500 );
        roldana.setY( 196 );
        
        massaAceleradora = new MassaAceleradora();
        massaAceleradora.setX( 505 );
        //massaAceleradora.setY( ... ); configurado no método resetar
        
        linha = new Linha();
        linha.setCarrinho( carrinho );
        linha.setRoldana( roldana );
        linha.setMassaAceleradora( massaAceleradora );
        
        quadrosPorSegundo = 30;
        
        painelDesenho.addSprite( trilho );
        painelDesenho.addSprite( sensor1 );
        painelDesenho.addSprite( sensor2 );
        painelDesenho.addSprite( linha );
        painelDesenho.addSprite( carrinho );
        painelDesenho.addSprite( roldana );
        painelDesenho.addSprite( massaAceleradora );


        
        // preparando interface gráfica
        sliderXIniCarrinho.setMinimum( ( int ) trilho.getX() );
        sliderXIniCarrinho.setMaximum( ( int ) trilho.getLargura() );
        sliderXIniCarrinho.setValue( ( int ) carrinho.getX() );
        
        sliderSensor1.setMinimum( ( int ) trilho.getX() );
        sliderSensor1.setMaximum( ( int ) trilho.getLargura() );
        sliderSensor1.setValue( ( int ) sensor1.getX() );
        
        sliderSensor2.setMinimum( ( int ) trilho.getX() );
        sliderSensor2.setMaximum( ( int ) trilho.getLargura() );
        sliderSensor2.setValue( ( int ) sensor2.getX() );
        
        resetar();
        
        slidersAtivados = true;
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        painelMovimento = new PainelDesenho();
        painelPlotagem = new PainelGrafico();
        painelControle = new javax.swing.JPanel();
        painelPosicoes = new javax.swing.JPanel();
        labelPosIniCarrinho = new javax.swing.JLabel();
        lblPS1 = new javax.swing.JLabel();
        lblPS2 = new javax.swing.JLabel();
        sliderXIniCarrinho = new javax.swing.JSlider();
        sliderSensor1 = new javax.swing.JSlider();
        sliderSensor2 = new javax.swing.JSlider();
        lblVPosCarrinho = new javax.swing.JLabel();
        lblVPosS1 = new javax.swing.JLabel();
        lblVPosS2 = new javax.swing.JLabel();
        btnResetar = new javax.swing.JButton();
        btnIniciar = new javax.swing.JButton();
        painelValores = new javax.swing.JPanel();
        labelMassaCarrinho = new javax.swing.JLabel();
        labelMassaMassaAceleradora = new javax.swing.JLabel();
        fieldMassaCarrinho = new javax.swing.JTextField();
        fieldMassaMassaAceleradora = new javax.swing.JTextField();
        btnAdicionarPontoGrafico = new javax.swing.JButton();
        btnLimparPontos = new javax.swing.JButton();
        painelTipoMovimento = new javax.swing.JPanel();
        radioMRU = new javax.swing.JRadioButton();
        radioMRUV = new javax.swing.JRadioButton();
        painelSensor1 = new javax.swing.JPanel();
        lblPosS1 = new javax.swing.JLabel();
        lblTS1 = new javax.swing.JLabel();
        lblPosicaoSensor1 = new javax.swing.JLabel();
        lblTempoSensor1 = new javax.swing.JLabel();
        painelSensor2 = new javax.swing.JPanel();
        lblPosS2 = new javax.swing.JLabel();
        lblTS2 = new javax.swing.JLabel();
        lblPosicaoSensor2 = new javax.swing.JLabel();
        lblTempoSensor2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Projeto de Física - Experimentos Virtuais");

        painelMovimento.setPreferredSize(new java.awt.Dimension(600, 300));

        javax.swing.GroupLayout painelMovimentoLayout = new javax.swing.GroupLayout(painelMovimento);
        painelMovimento.setLayout(painelMovimentoLayout);
        painelMovimentoLayout.setHorizontalGroup(
            painelMovimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        painelMovimentoLayout.setVerticalGroup(
            painelMovimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        painelPlotagem.setPreferredSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout painelPlotagemLayout = new javax.swing.GroupLayout(painelPlotagem);
        painelPlotagem.setLayout(painelPlotagemLayout);
        painelPlotagemLayout.setHorizontalGroup(
            painelPlotagemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 708, Short.MAX_VALUE)
        );
        painelPlotagemLayout.setVerticalGroup(
            painelPlotagemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        painelControle.setBorder(javax.swing.BorderFactory.createTitledBorder("Controle"));

        painelPosicoes.setBorder(javax.swing.BorderFactory.createTitledBorder("Posições"));

        labelPosIniCarrinho.setText("Posição Inicial Carrinho:");

        lblPS1.setText("Posição Sensor 1:");

        lblPS2.setText("Posição Sensor 2:");

        sliderXIniCarrinho.setMajorTickSpacing(20);
        sliderXIniCarrinho.setPaintTicks(true);
        sliderXIniCarrinho.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderXIniCarrinhoStateChanged(evt);
            }
        });

        sliderSensor1.setMajorTickSpacing(20);
        sliderSensor1.setPaintTicks(true);
        sliderSensor1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderSensor1StateChanged(evt);
            }
        });

        sliderSensor2.setMajorTickSpacing(20);
        sliderSensor2.setPaintTicks(true);
        sliderSensor2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderSensor2StateChanged(evt);
            }
        });

        lblVPosCarrinho.setText(" ");

        lblVPosS1.setText(" ");

        lblVPosS2.setText(" ");

        javax.swing.GroupLayout painelPosicoesLayout = new javax.swing.GroupLayout(painelPosicoes);
        painelPosicoes.setLayout(painelPosicoesLayout);
        painelPosicoesLayout.setHorizontalGroup(
            painelPosicoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelPosicoesLayout.createSequentialGroup()
                .addGroup(painelPosicoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelPosicoesLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(painelPosicoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelPosIniCarrinho)
                            .addComponent(lblPS1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelPosicoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sliderSensor1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sliderXIniCarrinho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelPosicoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblVPosCarrinho, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                            .addComponent(lblVPosS1, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelPosicoesLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(lblPS2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sliderSensor2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblVPosS2, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)))
                .addContainerGap())
        );
        painelPosicoesLayout.setVerticalGroup(
            painelPosicoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelPosicoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelPosicoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(labelPosIniCarrinho)
                    .addComponent(sliderXIniCarrinho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblVPosCarrinho))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelPosicoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblPS1)
                    .addComponent(sliderSensor1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblVPosS1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelPosicoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblPS2)
                    .addComponent(sliderSensor2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblVPosS2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnResetar.setText("Resetar");
        btnResetar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetarActionPerformed(evt);
            }
        });

        btnIniciar.setText("Iniciar");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });

        painelValores.setBorder(javax.swing.BorderFactory.createTitledBorder("Valores"));

        labelMassaCarrinho.setText("Massa Carrinho:");

        labelMassaMassaAceleradora.setText("Massa da Massa Aceleradora:");

        fieldMassaCarrinho.setText("300.0");

        fieldMassaMassaAceleradora.setText("10.0");

        btnAdicionarPontoGrafico.setText("Adicionar Pontos no Gráfico");
        btnAdicionarPontoGrafico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarPontoGraficoActionPerformed(evt);
            }
        });

        btnLimparPontos.setText("Limpar Pontos");
        btnLimparPontos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparPontosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelValoresLayout = new javax.swing.GroupLayout(painelValores);
        painelValores.setLayout(painelValoresLayout);
        painelValoresLayout.setHorizontalGroup(
            painelValoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelValoresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelValoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelValoresLayout.createSequentialGroup()
                        .addGroup(painelValoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelMassaCarrinho)
                            .addComponent(labelMassaMassaAceleradora))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelValoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldMassaMassaAceleradora, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(fieldMassaCarrinho, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)))
                    .addComponent(btnAdicionarPontoGrafico, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnLimparPontos, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        painelValoresLayout.setVerticalGroup(
            painelValoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelValoresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelValoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelMassaCarrinho)
                    .addComponent(fieldMassaCarrinho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelValoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelMassaMassaAceleradora)
                    .addComponent(fieldMassaMassaAceleradora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAdicionarPontoGrafico)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(btnLimparPontos)
                .addContainerGap())
        );

        painelTipoMovimento.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo do Movimento"));

        buttonGroup.add(radioMRU);
        radioMRU.setSelected(true);
        radioMRU.setText("MRU");

        buttonGroup.add(radioMRUV);
        radioMRUV.setText("MRUV");

        javax.swing.GroupLayout painelTipoMovimentoLayout = new javax.swing.GroupLayout(painelTipoMovimento);
        painelTipoMovimento.setLayout(painelTipoMovimentoLayout);
        painelTipoMovimentoLayout.setHorizontalGroup(
            painelTipoMovimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelTipoMovimentoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelTipoMovimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioMRU)
                    .addComponent(radioMRUV))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        painelTipoMovimentoLayout.setVerticalGroup(
            painelTipoMovimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelTipoMovimentoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radioMRU)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radioMRUV)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        painelSensor1.setBorder(javax.swing.BorderFactory.createTitledBorder("Sensor 1"));

        lblPosS1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPosS1.setText("Posição:");

        lblTS1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTS1.setText("Tempo:");

        lblPosicaoSensor1.setText(" ");

        lblTempoSensor1.setText(" ");

        javax.swing.GroupLayout painelSensor1Layout = new javax.swing.GroupLayout(painelSensor1);
        painelSensor1.setLayout(painelSensor1Layout);
        painelSensor1Layout.setHorizontalGroup(
            painelSensor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelSensor1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelSensor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblTS1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblPosS1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelSensor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPosicaoSensor1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTempoSensor1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelSensor1Layout.setVerticalGroup(
            painelSensor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelSensor1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelSensor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPosS1)
                    .addComponent(lblPosicaoSensor1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelSensor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTS1)
                    .addComponent(lblTempoSensor1))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        painelSensor2.setBorder(javax.swing.BorderFactory.createTitledBorder("Sensor 2"));

        lblPosS2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPosS2.setText("Posição:");

        lblTS2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTS2.setText("Tempo:");

        lblPosicaoSensor2.setText(" ");

        lblTempoSensor2.setText(" ");

        javax.swing.GroupLayout painelSensor2Layout = new javax.swing.GroupLayout(painelSensor2);
        painelSensor2.setLayout(painelSensor2Layout);
        painelSensor2Layout.setHorizontalGroup(
            painelSensor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelSensor2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelSensor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblTS2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblPosS2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelSensor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPosicaoSensor2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTempoSensor2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelSensor2Layout.setVerticalGroup(
            painelSensor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelSensor2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelSensor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPosS2)
                    .addComponent(lblPosicaoSensor2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelSensor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTS2)
                    .addComponent(lblTempoSensor2))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout painelControleLayout = new javax.swing.GroupLayout(painelControle);
        painelControle.setLayout(painelControleLayout);
        painelControleLayout.setHorizontalGroup(
            painelControleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelControleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelPosicoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelValores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelTipoMovimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelSensor1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelControleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(painelSensor2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(painelControleLayout.createSequentialGroup()
                        .addComponent(btnIniciar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnResetar)))
                .addGap(111, 111, 111))
        );
        painelControleLayout.setVerticalGroup(
            painelControleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelControleLayout.createSequentialGroup()
                .addGroup(painelControleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(painelTipoMovimento, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, painelControleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(painelPosicoes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                        .addComponent(painelValores, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, painelControleLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(painelControleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(painelSensor1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(painelControleLayout.createSequentialGroup()
                                .addComponent(painelSensor2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(painelControleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnResetar)
                                    .addComponent(btnIniciar))))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(painelMovimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(painelPlotagem, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE))
            .addComponent(painelControle, javax.swing.GroupLayout.DEFAULT_SIZE, 1320, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painelMovimento, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addComponent(painelPlotagem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelControle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1336)/2, (screenSize.height-635)/2, 1336, 635);
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        resetar();
        new Thread( new Animador() ).start();
    }//GEN-LAST:event_btnIniciarActionPerformed
    
private void btnResetarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetarActionPerformed
    resetar();
}//GEN-LAST:event_btnResetarActionPerformed
    
private void sliderXIniCarrinhoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderXIniCarrinhoStateChanged
    if ( slidersAtivados ) {
        carrinho.setX( sliderXIniCarrinho.getValue() );
        lblVPosCarrinho.setText( sliderXIniCarrinho.getValue() + "px" );
        painelDesenho.repaint();
    }
}//GEN-LAST:event_sliderXIniCarrinhoStateChanged

private void sliderSensor1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderSensor1StateChanged
    if ( slidersAtivados ) {
        if ( sliderSensor1.getValue() <= sensor2.getX() - sensor2.getLargura() ) {
            sensor1.setX( sliderSensor1.getValue() );
            lblVPosS1.setText( sliderSensor1.getValue() + "px" );
            painelDesenho.repaint();
        }
    }
}//GEN-LAST:event_sliderSensor1StateChanged

private void sliderSensor2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderSensor2StateChanged
    if ( slidersAtivados ) {
        if ( sliderSensor2.getValue() >= sensor1.getX() + sensor1.getLargura() ) {
            sensor2.setX( sliderSensor2.getValue() );
            lblVPosS2.setText( sliderSensor2.getValue() + "px" );
            painelDesenho.repaint();
        }
    }
}//GEN-LAST:event_sliderSensor2StateChanged

private void btnAdicionarPontoGraficoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarPontoGraficoActionPerformed
    
    DialogoPontos dp = new DialogoPontos( this, true, painelGrafico );
    dp.setVisible( true );
    painelGrafico.repaint();
    painelDesenho.repaint();
    
}//GEN-LAST:event_btnAdicionarPontoGraficoActionPerformed

private void btnLimparPontosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparPontosActionPerformed
    
    if ( JOptionPane.showConfirmDialog( 
            this, "Deseja mesmo limpar os pontos?", 
            "Confirmação", JOptionPane.YES_NO_OPTION ) == JOptionPane.YES_OPTION ) {
        painelGrafico.limparPontos();
    }
    
    painelGrafico.repaint();
    painelDesenho.repaint();
    
}//GEN-LAST:event_btnLimparPontosActionPerformed
    
    private void resetar() {
        
        carrinho.setX( xIniCarrinho );
        massaAceleradora.setY( yIniMassaAceleradora );
        sliderXIniCarrinho.setValue( ( int ) carrinho.getX() );

        sensor1.setAtivado( false );
        sensor2.setAtivado( false );
        
        lblVPosCarrinho.setText( sliderXIniCarrinho.getValue() + "px" );
        lblVPosS1.setText( sliderSensor1.getValue() + "px" );
        lblVPosS2.setText( sliderSensor2.getValue() + "px" );

        posicaoSensor1 = 0;
        posicaoSensor2 = 0;
        tempoSensor1 = 0;
        tempoSensor2 = 0;

        lblPosicaoSensor1.setText( "" );
        lblPosicaoSensor2.setText( "" );
        lblTempoSensor1.setText( "" );
        lblTempoSensor2.setText( "" );

        try {
            massaCarrinho = Double.parseDouble( fieldMassaCarrinho.getText() );
        } catch ( NumberFormatException exc ) {
            fieldMassaCarrinho.setText( String.valueOf( massaCarrinho ) );
        }
        
        try {
            massaMassaAceleradora = Double.parseDouble( fieldMassaMassaAceleradora.getText() );
        } catch ( NumberFormatException exc ) {
            fieldMassaMassaAceleradora.setText( String.valueOf( massaMassaAceleradora ) );
        }
        
        /********************************************
         ******* TODO: cálculo da aceleração ********
         ********************************************/
        aceleracao = massaMassaAceleradora * gravidade / massaCarrinho;
        
        //painelGrafico.limparPontos();
        painelDesenho.repaint();
        painelGrafico.repaint();
    
    }
    
    private class Animador implements Runnable {
        
        @Override
        public void run() {
            
            // tempo de execução em milisegundos
            double tempo = 0;
            
            // variáveis para cálculo da velocidade do carrinho
            double velocidadeXCarrinho = 0;
            double velocidadeIniXCarrinho = 0;
            
            // variáveis para cálculo da velocidade da massa aceleradora
            double velocidadeYMA = 0;
            double velocidadeIniYMA = 0;
            
            // flags dos sensores
            boolean verificarSensor1 = true;
            boolean verificarSensor2 = true;
            boolean sensor1Ativado = false;
            boolean sensor2Ativado = false;
            
            // está execurando
            executar = true;
            
            // prepara a interface
            sliderXIniCarrinho.setEnabled( false );
            sliderSensor1.setEnabled( false );
            sliderSensor2.setEnabled( false );
            fieldMassaCarrinho.setEnabled( false );
            fieldMassaMassaAceleradora.setEnabled( false );
            btnAdicionarPontoGrafico.setEnabled( false );
            btnLimparPontos.setEnabled( false );
            radioMRU.setEnabled( false );
            radioMRUV.setEnabled( false );
            btnResetar.setEnabled( false );
            btnIniciar.setEnabled( false );
            
            sensor1.setAtivado( false );
            sensor2.setAtivado( false );
            
            // se está executando
            while ( executar ) {

                /********************************************
                 ****** início do código do movimento *******
                 ********************************************/
                
                
                // calculando a velocidade atual
                velocidadeXCarrinho = velocidadeIniXCarrinho + aceleracao * tempo;
                
                // muda a velocidade atual do carrinho
                carrinho.setVelocidadeX( velocidadeXCarrinho );
                
                // muda a posição atual do carrinho, baseada na velocidade
                // configurada anteriormente
                carrinho.setX( carrinho.getX() + carrinho.getVelocidadeX() );
                
                
                
                // massa aceleradora
                velocidadeYMA = velocidadeIniYMA + aceleracao * tempo;
                
                // muda a velocidade atual da massa aceleradora
                massaAceleradora.setVelocidadeY( velocidadeYMA );
                
                // muda a posição atual da massa aceledora, baseada na velocidade
                // configurada anteriormente
                massaAceleradora.setY( massaAceleradora.getY() + massaAceleradora.getVelocidadeY() );
                
                
                
                // gira a roldana
                roldana.setRotacao( roldana.getRotacao() + 5 );
                
                
                /********************************************
                 ******* fim do código do movimento *********
                 ********************************************/
                
                
                
                
                
                /**********************************************
                 * início do código de tratamento de colisões *
                 **********************************************/
                
                // fim do trilho
                if ( carrinho.getXFim() > trilho.getXFim() ) {
                    
                    carrinho.setX( trilho.getXFim() - carrinho.getLargura() );
                    executar = false;
                    
                }
                
                sliderXIniCarrinho.setValue( ( int ) carrinho.getX() );
                
                // sensor 1
                if ( verificarSensor1 ) {
                    if ( carrinho.getXFim() >= sensor1.getXCentro() ) {
                        sensor1Ativado = true;
                        verificarSensor1 = false;
                    }
                }
                
                // o sensor 1 foi ativado?
                if ( sensor1Ativado ) {
                    
                    posicaoSensor1 = carrinho.getXFim() - trilho.getX();
                    tempoSensor1 = tempo;
                    
                    lblPosicaoSensor1.setText( df.format( posicaoSensor1 ) + "px" );
                    lblTempoSensor1.setText( df.format( tempoSensor1 ) + "ms" );
                    
                    sensor1.setAtivado( true );
                    sensor1Ativado = false;
                    
                    if ( radioMRU.isSelected() ) {
                        velocidadeIniXCarrinho = velocidadeXCarrinho;
                        aceleracao = 0;
                    }
                    
                }
                
                // sensor 2
                if ( verificarSensor2 ) {
                    if ( carrinho.getXFim() >= sensor2.getXCentro() ) {
                        sensor2Ativado = true;
                        verificarSensor2 = false;
                    }
                }
                
                // o sensor 2 foi ativado?
                if ( sensor2Ativado ) {
                    
                    posicaoSensor2 = carrinho.getXFim() - trilho.getX();
                    tempoSensor2 = tempo;
                    
                    lblPosicaoSensor2.setText( df.format( posicaoSensor2 ) + "px" );
                    lblTempoSensor2.setText( df.format( tempoSensor2 ) + "ms" );
                    
                    sensor2.setAtivado( true );
                    sensor2Ativado = false;
                    
                }
                
                /**********************************************
                 ** fim do código de tratamento de colisões ***
                 **********************************************/
                
                
                // insere um ponto no gráfico
                painelGrafico.adicionarPonto(
                        tempo / 10, carrinho.getXCentro() );
                
                // insere um ponto no gráfico entre os sensores
//                if ( sensor1.isAtivado() && !sensor2.isAtivado() ) {
//                    painelGrafico.adicionarPonto(
//                            tempo / 10, carrinho.getXCentro() );
//                }
                
                // conta o tempo
                tempo += 1000 / quadrosPorSegundo;
                
                // repinta os painéis
                painelDesenho.repaint();
                painelGrafico.repaint();
                
                try {
                    Thread.sleep( 1000 / quadrosPorSegundo );
                } catch ( InterruptedException exc ) {
                    exc.printStackTrace();
                }
                
            }
            
            sliderXIniCarrinho.setEnabled( true );
            sliderSensor1.setEnabled( true );
            sliderSensor2.setEnabled( true );
            fieldMassaCarrinho.setEnabled( true );
            fieldMassaMassaAceleradora.setEnabled( true );
            btnAdicionarPontoGrafico.setEnabled( true );
            btnLimparPontos.setEnabled( true );
            radioMRU.setEnabled( true );
            radioMRUV.setEnabled( true );
            btnResetar.setEnabled( true );
            btnIniciar.setEnabled( true );
            
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionarPontoGrafico;
    private javax.swing.JButton btnIniciar;
    private javax.swing.JButton btnLimparPontos;
    private javax.swing.JButton btnResetar;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JTextField fieldMassaCarrinho;
    private javax.swing.JTextField fieldMassaMassaAceleradora;
    private javax.swing.JLabel labelMassaCarrinho;
    private javax.swing.JLabel labelMassaMassaAceleradora;
    private javax.swing.JLabel labelPosIniCarrinho;
    private javax.swing.JLabel lblPS1;
    private javax.swing.JLabel lblPS2;
    private javax.swing.JLabel lblPosS1;
    private javax.swing.JLabel lblPosS2;
    private javax.swing.JLabel lblPosicaoSensor1;
    private javax.swing.JLabel lblPosicaoSensor2;
    private javax.swing.JLabel lblTS1;
    private javax.swing.JLabel lblTS2;
    private javax.swing.JLabel lblTempoSensor1;
    private javax.swing.JLabel lblTempoSensor2;
    private javax.swing.JLabel lblVPosCarrinho;
    private javax.swing.JLabel lblVPosS1;
    private javax.swing.JLabel lblVPosS2;
    private javax.swing.JPanel painelControle;
    private javax.swing.JPanel painelMovimento;
    private javax.swing.JPanel painelPlotagem;
    private javax.swing.JPanel painelPosicoes;
    private javax.swing.JPanel painelSensor1;
    private javax.swing.JPanel painelSensor2;
    private javax.swing.JPanel painelTipoMovimento;
    private javax.swing.JPanel painelValores;
    private javax.swing.JRadioButton radioMRU;
    private javax.swing.JRadioButton radioMRUV;
    private javax.swing.JSlider sliderSensor1;
    private javax.swing.JSlider sliderSensor2;
    private javax.swing.JSlider sliderXIniCarrinho;
    // End of variables declaration//GEN-END:variables
}
